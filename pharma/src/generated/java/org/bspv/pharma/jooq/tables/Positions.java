/*
 * This file is generated by jOOQ.
 */
package org.bspv.pharma.jooq.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.bspv.pharma.jooq.Indexes;
import org.bspv.pharma.jooq.Keys;
import org.bspv.pharma.jooq.Public;
import org.bspv.pharma.jooq.tables.records.PositionsRecord;
import org.bspv.pharma.repository.jooq.converter.OffsetDateTimeConverter;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Positions extends TableImpl<PositionsRecord> {

    private static final long serialVersionUID = 547411091;

    /**
     * The reference instance of <code>public.positions</code>
     */
    public static final Positions POSITIONS = new Positions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PositionsRecord> getRecordType() {
        return PositionsRecord.class;
    }

    /**
     * The column <code>public.positions.id</code>.
     */
    public final TableField<PositionsRecord, UUID> ID = createField("id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.positions.version</code>.
     */
    public final TableField<PositionsRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.positions.created_by</code>.
     */
    public final TableField<PositionsRecord, UUID> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.positions.created_date</code>.
     */
    public final TableField<PositionsRecord, OffsetDateTime> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "", new OffsetDateTimeConverter());

    /**
     * The column <code>public.positions.goods_id</code>.
     */
    public final TableField<PositionsRecord, UUID> GOODS_ID = createField("goods_id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.positions.location_id</code>.
     */
    public final TableField<PositionsRecord, UUID> LOCATION_ID = createField("location_id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.positions.minimum</code>.
     */
    public final TableField<PositionsRecord, Integer> MINIMUM = createField("minimum", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.positions.maximum</code>.
     */
    public final TableField<PositionsRecord, Integer> MAXIMUM = createField("maximum", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.positions.optimum</code>.
     */
    public final TableField<PositionsRecord, Integer> OPTIMUM = createField("optimum", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.positions.current</code>.
     */
    public final TableField<PositionsRecord, Integer> CURRENT = createField("current", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.positions.type_</code>.
     */
    public final TableField<PositionsRecord, String> TYPE_ = createField("type_", org.jooq.impl.SQLDataType.VARCHAR(75).nullable(false), this, "");

    /**
     * The column <code>public.positions.value_date</code>.
     */
    public final TableField<PositionsRecord, OffsetDateTime> VALUE_DATE = createField("value_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "", new OffsetDateTimeConverter());

    /**
     * The column <code>public.positions.linked_inventory_id</code>.
     */
    public final TableField<PositionsRecord, UUID> LINKED_INVENTORY_ID = createField("linked_inventory_id", org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * Create a <code>public.positions</code> table reference
     */
    public Positions() {
        this(DSL.name("positions"), null);
    }

    /**
     * Create an aliased <code>public.positions</code> table reference
     */
    public Positions(String alias) {
        this(DSL.name(alias), POSITIONS);
    }

    /**
     * Create an aliased <code>public.positions</code> table reference
     */
    public Positions(Name alias) {
        this(alias, POSITIONS);
    }

    private Positions(Name alias, Table<PositionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Positions(Name alias, Table<PositionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Positions(Table<O> child, ForeignKey<O, PositionsRecord> key) {
        super(child, key, POSITIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.POSITIONS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PositionsRecord> getPrimaryKey() {
        return Keys.POSITIONS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PositionsRecord>> getKeys() {
        return Arrays.<UniqueKey<PositionsRecord>>asList(Keys.POSITIONS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PositionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PositionsRecord, ?>>asList(Keys.POSITIONS__FK_POSITIONS__GOODS__1, Keys.POSITIONS__FK_POSITIONS__LOCATIONS__1, Keys.POSITIONS__FK_POSITIONS__INVENTORIES__1);
    }

    public Goods goods() {
        return new Goods(this, Keys.POSITIONS__FK_POSITIONS__GOODS__1);
    }

    public Locations locations() {
        return new Locations(this, Keys.POSITIONS__FK_POSITIONS__LOCATIONS__1);
    }

    public Inventories inventories() {
        return new Inventories(this, Keys.POSITIONS__FK_POSITIONS__INVENTORIES__1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Positions as(String alias) {
        return new Positions(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Positions as(Name alias) {
        return new Positions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Positions rename(String name) {
        return new Positions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Positions rename(Name name) {
        return new Positions(name, null);
    }
}
