/*
 * This file is generated by jOOQ.
 */
package org.bspv.pharma.jooq.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.bspv.pharma.jooq.Indexes;
import org.bspv.pharma.jooq.Keys;
import org.bspv.pharma.jooq.Public;
import org.bspv.pharma.jooq.tables.records.OrdersEventsRecord;
import org.bspv.pharma.repository.jooq.converter.OffsetDateTimeConverter;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrdersEvents extends TableImpl<OrdersEventsRecord> {

    private static final long serialVersionUID = 1798056772;

    /**
     * The reference instance of <code>public.orders_events</code>
     */
    public static final OrdersEvents ORDERS_EVENTS = new OrdersEvents();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdersEventsRecord> getRecordType() {
        return OrdersEventsRecord.class;
    }

    /**
     * The column <code>public.orders_events.id</code>.
     */
    public final TableField<OrdersEventsRecord, UUID> ID = createField("id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.orders_events.order_id</code>.
     */
    public final TableField<OrdersEventsRecord, UUID> ORDER_ID = createField("order_id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.orders_events.created_by</code>.
     */
    public final TableField<OrdersEventsRecord, UUID> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.orders_events.created_date</code>.
     */
    public final TableField<OrdersEventsRecord, OffsetDateTime> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "", new OffsetDateTimeConverter());

    /**
     * The column <code>public.orders_events.event_type</code>.
     */
    public final TableField<OrdersEventsRecord, String> EVENT_TYPE = createField("event_type", org.jooq.impl.SQLDataType.VARCHAR(75).nullable(false), this, "");

    /**
     * Create a <code>public.orders_events</code> table reference
     */
    public OrdersEvents() {
        this(DSL.name("orders_events"), null);
    }

    /**
     * Create an aliased <code>public.orders_events</code> table reference
     */
    public OrdersEvents(String alias) {
        this(DSL.name(alias), ORDERS_EVENTS);
    }

    /**
     * Create an aliased <code>public.orders_events</code> table reference
     */
    public OrdersEvents(Name alias) {
        this(alias, ORDERS_EVENTS);
    }

    private OrdersEvents(Name alias, Table<OrdersEventsRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrdersEvents(Name alias, Table<OrdersEventsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> OrdersEvents(Table<O> child, ForeignKey<O, OrdersEventsRecord> key) {
        super(child, key, ORDERS_EVENTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ORDERS_EVENTS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OrdersEventsRecord> getPrimaryKey() {
        return Keys.ORDERS_EVENTS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OrdersEventsRecord>> getKeys() {
        return Arrays.<UniqueKey<OrdersEventsRecord>>asList(Keys.ORDERS_EVENTS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<OrdersEventsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrdersEventsRecord, ?>>asList(Keys.ORDERS_EVENTS__FK_ORDER_EVENTS__ORDERS);
    }

    public Orders orders() {
        return new Orders(this, Keys.ORDERS_EVENTS__FK_ORDER_EVENTS__ORDERS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrdersEvents as(String alias) {
        return new OrdersEvents(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrdersEvents as(Name alias) {
        return new OrdersEvents(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrdersEvents rename(String name) {
        return new OrdersEvents(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrdersEvents rename(Name name) {
        return new OrdersEvents(name, null);
    }
}
