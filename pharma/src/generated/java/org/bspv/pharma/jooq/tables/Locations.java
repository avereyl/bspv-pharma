/*
 * This file is generated by jOOQ.
 */
package org.bspv.pharma.jooq.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.bspv.pharma.jooq.Indexes;
import org.bspv.pharma.jooq.Keys;
import org.bspv.pharma.jooq.Public;
import org.bspv.pharma.jooq.tables.records.LocationsRecord;
import org.bspv.pharma.repository.jooq.converter.OffsetDateTimeConverter;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Locations extends TableImpl<LocationsRecord> {

    private static final long serialVersionUID = -1219016400;

    /**
     * The reference instance of <code>public.locations</code>
     */
    public static final Locations LOCATIONS = new Locations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LocationsRecord> getRecordType() {
        return LocationsRecord.class;
    }

    /**
     * The column <code>public.locations.id</code>.
     */
    public final TableField<LocationsRecord, UUID> ID = createField("id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.locations.version</code>.
     */
    public final TableField<LocationsRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.locations.created_by</code>.
     */
    public final TableField<LocationsRecord, UUID> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.locations.created_date</code>.
     */
    public final TableField<LocationsRecord, OffsetDateTime> CREATED_DATE = createField("created_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "", new OffsetDateTimeConverter());

    /**
     * The column <code>public.locations.last_modified_by</code>.
     */
    public final TableField<LocationsRecord, UUID> LAST_MODIFIED_BY = createField("last_modified_by", org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>public.locations.last_modified_date</code>.
     */
    public final TableField<LocationsRecord, OffsetDateTime> LAST_MODIFIED_DATE = createField("last_modified_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new OffsetDateTimeConverter());

    /**
     * The column <code>public.locations.code</code>.
     */
    public final TableField<LocationsRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(75).nullable(false), this, "");

    /**
     * The column <code>public.locations.name</code>.
     */
    public final TableField<LocationsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.locations.description</code>.
     */
    public final TableField<LocationsRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.locations.obsolete_date</code>.
     */
    public final TableField<LocationsRecord, OffsetDateTime> OBSOLETE_DATE = createField("obsolete_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new OffsetDateTimeConverter());

    /**
     * Create a <code>public.locations</code> table reference
     */
    public Locations() {
        this(DSL.name("locations"), null);
    }

    /**
     * Create an aliased <code>public.locations</code> table reference
     */
    public Locations(String alias) {
        this(DSL.name(alias), LOCATIONS);
    }

    /**
     * Create an aliased <code>public.locations</code> table reference
     */
    public Locations(Name alias) {
        this(alias, LOCATIONS);
    }

    private Locations(Name alias, Table<LocationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Locations(Name alias, Table<LocationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Locations(Table<O> child, ForeignKey<O, LocationsRecord> key) {
        super(child, key, LOCATIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LOCATIONS_PKEY, Indexes.UK_LOCATIONS__1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LocationsRecord> getPrimaryKey() {
        return Keys.LOCATIONS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LocationsRecord>> getKeys() {
        return Arrays.<UniqueKey<LocationsRecord>>asList(Keys.LOCATIONS_PKEY, Keys.UK_LOCATIONS__1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Locations as(String alias) {
        return new Locations(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Locations as(Name alias) {
        return new Locations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Locations rename(String name) {
        return new Locations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Locations rename(Name name) {
        return new Locations(name, null);
    }
}
