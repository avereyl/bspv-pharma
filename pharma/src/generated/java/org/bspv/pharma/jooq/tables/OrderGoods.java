/*
 * This file is generated by jOOQ.
 */
package org.bspv.pharma.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.bspv.pharma.jooq.Indexes;
import org.bspv.pharma.jooq.Keys;
import org.bspv.pharma.jooq.Public;
import org.bspv.pharma.jooq.tables.records.OrderGoodsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrderGoods extends TableImpl<OrderGoodsRecord> {

    private static final long serialVersionUID = -1499839824;

    /**
     * The reference instance of <code>public.order_goods</code>
     */
    public static final OrderGoods ORDER_GOODS = new OrderGoods();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderGoodsRecord> getRecordType() {
        return OrderGoodsRecord.class;
    }

    /**
     * The column <code>public.order_goods.order_id</code>.
     */
    public final TableField<OrderGoodsRecord, UUID> ORDER_ID = createField("order_id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order_goods.goods_id</code>.
     */
    public final TableField<OrderGoodsRecord, UUID> GOODS_ID = createField("goods_id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.order_goods.version</code>.
     */
    public final TableField<OrderGoodsRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.order_goods.quantity</code>.
     */
    public final TableField<OrderGoodsRecord, Long> QUANTITY = createField("quantity", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>public.order_goods</code> table reference
     */
    public OrderGoods() {
        this(DSL.name("order_goods"), null);
    }

    /**
     * Create an aliased <code>public.order_goods</code> table reference
     */
    public OrderGoods(String alias) {
        this(DSL.name(alias), ORDER_GOODS);
    }

    /**
     * Create an aliased <code>public.order_goods</code> table reference
     */
    public OrderGoods(Name alias) {
        this(alias, ORDER_GOODS);
    }

    private OrderGoods(Name alias, Table<OrderGoodsRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrderGoods(Name alias, Table<OrderGoodsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> OrderGoods(Table<O> child, ForeignKey<O, OrderGoodsRecord> key) {
        super(child, key, ORDER_GOODS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ORDER_GOODS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OrderGoodsRecord> getPrimaryKey() {
        return Keys.ORDER_GOODS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OrderGoodsRecord>> getKeys() {
        return Arrays.<UniqueKey<OrderGoodsRecord>>asList(Keys.ORDER_GOODS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<OrderGoodsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrderGoodsRecord, ?>>asList(Keys.ORDER_GOODS__FK_ORDER_GOODS__ORDERS, Keys.ORDER_GOODS__FK_ORDER_GOODS__GOODS);
    }

    public Orders orders() {
        return new Orders(this, Keys.ORDER_GOODS__FK_ORDER_GOODS__ORDERS);
    }

    public Goods goods() {
        return new Goods(this, Keys.ORDER_GOODS__FK_ORDER_GOODS__GOODS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrderGoods as(String alias) {
        return new OrderGoods(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrderGoods as(Name alias) {
        return new OrderGoods(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderGoods rename(String name) {
        return new OrderGoods(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderGoods rename(Name name) {
        return new OrderGoods(name, null);
    }
}
